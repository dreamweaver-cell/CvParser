@page "/cv"
@using System.Net.Http.Json
@rendermode InteractiveServer
@inject HttpClient Http
@inject NavigationManager NavManager
@inject IJSRuntime JS

<PageTitle>Ladda upp CV</PageTitle>

<h1>Ladda upp ett CV (.docx eller .pdf)</h1>

<div class="container d-flex ms-5">
    <div class="col-sm-4 mt-4">
        <InputFile OnChange="HandleFileSelected" accept=".docx,.pdf" class="form-control" />
        <div class="my-4 d-flex align-items-center">
            <button @onclick="UploadCv" class="btn btn-dev rounded-pill shadow px-5" disabled="@(!isFileSelected || showSpinner)">
                Ladda upp
            </button>
            <div class="spinner-border @(showSpinner ? "d-inline-flex" : "visually-hidden") text-dev ms-4" role="status"></div>
        </div>
    </div>
</div>

@if (!string.IsNullOrWhiteSpace(_successMessage))
{
    <div class="alert alert-success mt-3">@_successMessage</div>
}
@if (!string.IsNullOrWhiteSpace(_errorMessage))
{
    <div class="alert alert-danger mt-3">@_errorMessage</div>
}

@if (!string.IsNullOrEmpty(cvToken))
{
    <hr class="my-5" />
	<h2>Ladda ner CV</h2>
    <button @onclick="DownloadCv" class="btn btn-success rounded-pill shadow px-4">
    	Ladda ner
    </button>
}

@code {
    private IBrowserFile? selectedFile;
    private bool isFileSelected => selectedFile != null;
    private string? _errorMessage;
    private string? _successMessage;
    private string? cvToken;
    private bool showSpinner = false;
    private string selectedFormat = "word"; // Word as standard
    

    protected override async Task OnInitializedAsync()
    {
        cvToken = await JS.InvokeAsync<string>("localStorage.getItem", "cvToken");
        var storedLang = await JS.InvokeAsync<string>("localStorage.getItem", "cvLang");
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var allowedExtensions = new[] { ".docx", ".pdf" };
        var fileExtension = Path.GetExtension(file?.Name).ToLower();

        if (file == null || !allowedExtensions.Contains(fileExtension))
        {
            _errorMessage = "Endast .docx- och .pdf-filer tillåts.";
            _successMessage = null;
            selectedFile = null;
            cvToken = null;
            return;
        }

        selectedFile = file;
        _errorMessage = null;
        _successMessage = $"Fil vald: {file.Name}";
        cvToken = null; // new upload, reset token
    }

    private async Task UploadCv()
    {
        if (selectedFile == null) return;

        try
        {
            showSpinner = true;
            using var content = new MultipartFormDataContent();
            using var stream = selectedFile.OpenReadStream(10 * 1024 * 1024);
            content.Add(new StreamContent(stream), "file", selectedFile.Name);

            var response = await Http.PostAsync("api/cv/upload", content);
            showSpinner = false;

            if (!response.IsSuccessStatusCode)
            {
                _errorMessage = $"Fel vid uppladdning: {response.StatusCode}";
                return;
            }

            var apiResponse = await response.Content.ReadFromJsonAsync<ApiResponse<string>>();
            cvToken = apiResponse?.Data;

            if (!string.IsNullOrEmpty(cvToken))
            {
                await JS.InvokeVoidAsync("localStorage.setItem", "cvToken", cvToken);
                _successMessage = "CV uppladdat och klart för nedladdning!";
                _errorMessage = null;
            }
            else
            {
                _errorMessage = "Kunde inte hämta token från API.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Ett fel inträffade vid uppladdning: {ex.Message}";
            showSpinner = false;
        }
    }

    private async void DownloadCv()
    {
        if (string.IsNullOrEmpty(cvToken))
        {
            _errorMessage = "Inget CV finns att ladda ner. Ladda upp först.";
            return;
        }

        var url = $"api/cv/download?token={cvToken}&format={selectedFormat}";
        NavManager.NavigateTo(url, forceLoad: true);
    }

    public class ApiResponse<T>
    {
        public bool Success { get; set; }
        public T? Data { get; set; }
        public string? Error { get; set; }
    }
}
