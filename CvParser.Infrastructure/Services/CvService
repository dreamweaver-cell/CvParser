
using DW = DocumentFormat.OpenXml.Drawing;
using WP = DocumentFormat.OpenXml.Drawing.Wordprocessing;
using Run = DocumentFormat.OpenXml.Wordprocessing.Run;
using Text = DocumentFormat.OpenXml.Wordprocessing.Text;
using Bold = DocumentFormat.OpenXml.Wordprocessing.Bold;
using Break = DocumentFormat.OpenXml.Wordprocessing.Break;
using Drawing = DocumentFormat.OpenXml.Wordprocessing.Drawing;
using FontSize = DocumentFormat.OpenXml.Wordprocessing.FontSize;
using Paragraph = DocumentFormat.OpenXml.Wordprocessing.Paragraph;
using RunProperties = DocumentFormat.OpenXml.Wordprocessing.RunProperties;


public class CvService : ICvService
{
    private readonly IDocxService _docxService;
    private readonly IPdfService _pdfService;
    private readonly IImageService _imageService;
    private readonly IAiService _aiService;
    private readonly ILogger<CvService> _logger;

    // Constructor with dependency injection
    public CvService(
        IDocxService docxService,
        IPdfService pdfService,
        IImageService imageService,
        IAiService aiService,
        ILogger<CvService> logger)
    {
        _docxService = docxService;
        _pdfService = pdfService;
        _imageService = imageService;
        _aiService = aiService;
        _logger = logger;
    }

  
  
    public async Task<Cv?> ParseCvFromUploadedFileAsync(IFormFile file)
    {
        if (file == null || file.Length == 0)
        {
            _logger.LogWarning("Ingen fil laddades upp eller filen var tom.");
            return null;
        }

        try
        {
            string documentText = string.Empty;
            var documentImages = new List<Image>();
            var documentType = file.FileName.EndsWith(".pdf", StringComparison.OrdinalIgnoreCase) ? DocumentType.PDF : DocumentType.Word;

            using (var memoryStream = new MemoryStream())
            {
                await file.CopyToAsync(memoryStream);
                memoryStream.Position = 0;

                if (documentType == DocumentType.PDF)
                {
                    documentText = _pdfService.GetText(memoryStream);
                    memoryStream.Position = 0;
                    documentImages = _pdfService.GetImages(memoryStream);
                }
                else if (documentType == DocumentType.Word)
                {
                    documentText = _docxService.GetText(memoryStream);
                    memoryStream.Position = 0;
                    documentImages = _docxService.GetImages(memoryStream);
                }
            }

            if (string.IsNullOrWhiteSpace(documentText))
            {
                _logger.LogInformation("Ingen text kunde extraheras från dokumentet.");
                return null;
            }

            // Anropar AI-tjänsten med den extraherade texten
            var resultJson = await _aiService.SendCvAsync(documentText);
            if (string.IsNullOrWhiteSpace(resultJson))
            {
                _logger.LogInformation("AI-tjänsten returnerade ingen JSON-data.");
                return null;
            }

            // Deserialiserar JSON till ett Cv-objekt
            Cv? cv = null;
            try
            {
                cv = JsonSerializer.Deserialize<Cv>(resultJson, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            }
            catch (JsonException ex)
            {
                _logger.LogError(ex, "Kunde inte deserialisera JSON-svaret från AI-tjänsten.");
                throw new InvalidOperationException("Ogiltigt JSON-format från AI-tjänsten.", ex);
            }

            if (cv is not null && documentImages.Any())
            {
                // Letar efter en bild med ett mänskligt ansikte
                var profileImage = documentImages.FirstOrDefault(img => _imageService.HasHumanFace(img));
                if (profileImage is not null)
                {
                    cv.PersonalInfo.ImageBase64 = _imageService.ToBase64(profileImage);
                }
            }

            return cv;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Ett fel uppstod vid parsning av den uppladdade filen.");
            throw; // Propagerar undantaget vidare för att hanteras av kontrollern
        }
    }

    public async Task<MemoryStream> CreateXameraCV(Cv cv)
    {
        // Få den fullständiga sökvägen till mallen
        string templateFile = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, _cvTemplatePath);

        // Verifiera att filen finns innan du försöker öppna den
        if (!File.Exists(templateFile))
        {
            throw new FileNotFoundException($"CV template file not found at: {templateFile}");
        }

        // Open template file stream (read-only)
        using var templateFileStream = File.OpenRead(templateFile);

        var memoryStream = new MemoryStream();
        //string folderPath = @"C:\_DEV\CVs";
        //string fileTemplate = @$"{folderPath}\CV-FirstPage-Template.docx";

        // Open template file stream (read-only)
        //using var templateFileStream = File.OpenRead(fileTemplate);

        // Copy to memory stream (so we can edit it in memory if needed)
        var resultStream = new MemoryStream();
        templateFileStream.CopyTo(resultStream);
        resultStream.Position = 0;

        // Open the Word document from memory stream
        using (var doc = WordprocessingDocument.Open(resultStream, true))
        {
            CreateFirstPage(doc, cv);
            NewPage(doc);
            AddAllSkills(doc, cv.Skills);
            AddProjects(doc, cv.Projects);
            AddWork(doc, cv.Work);
        }

        resultStream.Position = 0;

        return resultStream;
    }

    private void CreateFirstPage(WordprocessingDocument doc, Cv cv)
    {
        foreach (var textElement in doc.MainDocumentPart.Document.Body.Descendants<Text>())
        {
            if (textElement.ChildElements.Count > 0)
            {
                var childrens = textElement.ChildElements;
            }

            switch (textElement.Text)
            {
                case "|Name|":
                    textElement.Text = cv.Basics.Name;
                    break;
                case "|Title|":
                    textElement.Text = cv.Basics.Label;
                    break;
                case "|Summary|":
                    textElement.Text = cv.Basics.Summary;
                    break;
                case "|MainSkills|":
                    ReplaceMainSkills(doc, cv.Skills, textElement);
                    break;
                case "|Educations|":
                    ReplaceEducations(doc, cv.Education, textElement);
                    break;
                case "|Languages|":
                    ReplaceLanguages(doc, cv.Languages, textElement);
                    break;
            }
        }

        ReplaceProfilePicture(doc, cv.Basics.ImageBase64);
    }
    private void NewPage(WordprocessingDocument doc)
    {
        var body = doc.MainDocumentPart.Document.Body;
        var pageBreakParagraph = new Paragraph();
        var run = new Run();
        var breakElement = new Break() { Type = BreakValues.Page };
        run.Append(breakElement);
        pageBreakParagraph.Append(run);
        body.Append(pageBreakParagraph);
    }

    #region First Page
    private void ReplaceProfilePicture(WordprocessingDocument doc, string? imageBase64)
    {
        foreach (var imagePart in doc.MainDocumentPart.ImageParts)
        {
            // Replace profile image
            if (!String.IsNullOrEmpty(imageBase64))
            {
                byte[] imageBytes = Convert.FromBase64String(imageBase64);

                using (MemoryStream newImageStream = new MemoryStream(imageBytes))
                {
                    imagePart.FeedData(newImageStream);
                }
            }
            else // Delete profileimage placeholder
            {
                List<Drawing> drawingPartsToDelete = new List<Drawing>();
                List<Drawing> drawingParts = new List<Drawing>(doc.MainDocumentPart.RootElement.Descendants<Drawing>());
                IEnumerable<Drawing> drawings = drawingParts.Where(d => d.Descendants<DW.Pictures.Picture>().Any(p => p.BlipFill.Blip.Embed == doc.MainDocumentPart.GetIdOfPart(imagePart)));

                foreach (var drawing in drawings)
                {
                    if (drawing is not null && !drawingPartsToDelete.Contains(drawing))
                    {
                        drawingPartsToDelete.Add(drawing);
                    }
                }

                // Must have this
                foreach (var drawingPartToDelete in drawingPartsToDelete)
                {
                    drawingPartToDelete.Remove();
                }

                doc.MainDocumentPart.DeleteParts(new List<ImagePart>() { imagePart });
            }
        }
    }

    private void ReplaceMainSkills(WordprocessingDocument doc, List<Skill>? skills, Text textElement)
    {
        var parentRun = (Run)textElement.Parent;
        var parentParagraph = (Paragraph)parentRun.Parent;

        // Remove the placeholder run
        parentParagraph.RemoveChild(parentRun);

        try
        {
            if (skills is not null && skills.Any())
            {
                List<string> mainSkills = skills
                    .Where(s => s.Keywords != null)
                    .SelectMany(s => s.Keywords!)
                    .Where(k => k.IsMainSkill)
                    .Select(k => k.Name!)
                    .ToList();

                foreach (var skill in mainSkills)
                {
                    var keywordRunProps = new RunProperties(
                        new RunFonts() { Ascii = "Albert Sans" },
                        new FontSize() { Val = "20" }
                    );

                    var keywordRun = new Run(keywordRunProps, new Text(skill));
                    parentParagraph.AppendChild(keywordRun);

                    if (skill != mainSkills.Last())
                    {
                        parentParagraph.AppendChild(new Run(new Break()));
                    }
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    private void ReplaceEducations(WordprocessingDocument doc, List<Education>? educations, Text textElement)
    {
        var parentRun = (Run)textElement.Parent;
        var parentParagraph = (Paragraph)parentRun.Parent;

        // Remove the placeholder
        parentParagraph.RemoveChild(parentRun);

        try
        {
            if (educations is not null && educations.Any())
            {
                foreach (var education in educations)
                {

                    var yearsRunProps = new RunProperties(
                        new RunFonts() { Ascii = "Albert Sans" },
                        new FontSize() { Val = "20" },
                        new Bold()
                    );
                    var institutionRunProps = new RunProperties(
                        new RunFonts() { Ascii = "Albert Sans" },
                        new FontSize() { Val = "20" }
                    );
                    var descriptionRunProps = new RunProperties(
                       new RunFonts() { Ascii = "Albert Sans" },
                       new FontSize() { Val = "18" }
                   );

                    DateTime start;
                    DateTime end;
                    DateTime.TryParse(education.StartDate, null, out start);
                    DateTime.TryParse(education.EndDate, null, out end);

                    var yearStart = (start.Year > 1900) ? start.Year.ToString() : education.StartDate;
                    var yearEnd = (end.Year > 1900) ? end.Year.ToString() : education.EndDate;
                    var yearsText = (yearStart != yearEnd) ? $"{yearStart} - {yearEnd}" : yearStart;

                    var yearsRun = new Run(yearsRunProps, new Text(yearsText));
                    var institutionRun = new Run(institutionRunProps, new Text(education.Institution));
                    var descriptionRun = new Run(descriptionRunProps, new Text(education.StudyType));

                    parentParagraph.AppendChild(yearsRun);
                    parentParagraph.AppendChild(new Run(new Break()));
                    parentParagraph.AppendChild(institutionRun);
                    parentParagraph.AppendChild(new Run(new Break()));
                    parentParagraph.AppendChild(descriptionRun);

                    if (education != educations.Last())
                    {
                        parentParagraph.AppendChild(new Run(new Break()));
                    }
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    private void ReplaceLanguages(WordprocessingDocument doc, List<Language>? languages, Text textElement)
    {
        var parentRun = (Run)textElement.Parent;
        var parentParagraph = (Paragraph)parentRun.Parent;

        // Remove the placeholder run
        parentParagraph.RemoveChild(parentRun);
        bool firstSkill = true;

        foreach (var language in languages)
        {
            // Add a line break before each new skill name except the first
            if (!firstSkill)
            {
                parentParagraph.AppendChild(new Run(new Break()));
            }
            firstSkill = false;

            // Bold Skill Name, Albert Sans 11pt (22 half-points)
            var skillRunProps = new RunProperties(
                new RunFonts() { Ascii = "Albert Sans" },
                new FontSize() { Val = "20" }
            );

            var skillRun = new Run(skillRunProps, new Text($"{language.LanguageName}: {language.Fluency}"));
            parentParagraph.AppendChild(skillRun);
        }
    }

    public void ReplacePlaceholderWithImage(WordprocessingDocument doc, string placeholder, string base64Image, Text textElement)
    {
        var mainPart = doc.MainDocumentPart;

        // Decode the base64 image into a byte array
        byte[] imageBytes = Convert.FromBase64String(base64Image);

        // Add image part to the document
        var imagePart = mainPart.AddImagePart(ImagePartType.Png);
        using (var stream = new MemoryStream(imageBytes))
        {
            imagePart.FeedData(stream);
        }

        // Get relationship ID
        string imagePartId = mainPart.GetIdOfPart(imagePart);
        var run = textElement.Parent as Run;
        var paragraph = run.Parent as Paragraph;

        // Remove the placeholder run
        run.Remove();

        // Create Drawing element (image)
        var drawing = CreateImage(mainPart, imagePartId, "ProfileImage", 500, 500);

        // Add image to a new run
        var imageRun = new Run(drawing);

        // Insert the image run into the paragraph
        paragraph.Append(imageRun);
    }
    #endregion

    #region Other Pages

    private void AddHeader(WordprocessingDocument doc, string name)
    {
        var headerRunProps = new RunProperties(
            new RunFonts() { Ascii = "Albert Sans" },
            new FontSize() { Val = "32" },
            new Bold());
        var headerRun = new Run(headerRunProps, new Text(name));
        var headerParagraph = new Paragraph(headerRun);
        var spacerParagraph = new Paragraph(new Run(new Text("")));

        var body = doc.MainDocumentPart.Document.Body;
        body.Append(headerParagraph);
        body.Append(spacerParagraph);
    }

    private void AddAllSkills(WordprocessingDocument doc, List<Skill>? skills)
    {
        if (skills is not null && skills.Any())
        {
            AddHeader(doc, "Skills");
            var body = doc.MainDocumentPart.Document.Body;

            foreach (var skill in skills)
            {
                Table table = new Table();
                TableProperties tblProps = new TableProperties(
                    new TableBorders(
                        new TopBorder { Val = BorderValues.None },
                        new BottomBorder { Val = BorderValues.None },
                        new LeftBorder { Val = BorderValues.None },
                        new RightBorder { Val = BorderValues.None },
                        new InsideHorizontalBorder { Val = BorderValues.None },
                        new InsideVerticalBorder { Val = BorderValues.None }
                    ),
                    new TableWidth { Type = TableWidthUnitValues.Pct, Width = "5000" }
                );

                var grid = new TableGrid(
                    new GridColumn() { Width = "2500" },
                    new GridColumn() { Width = "2500" }
                );

                table.AppendChild(tblProps);
                table.AppendChild(grid);

                TableRow trHeader = new TableRow();
                Run runHeader = new Run();
                RunProperties runPropsHeader = new RunProperties(
                    new RunFonts() { Ascii = "Albert Sans" },
                    new FontSize() { Val = "24" },
                    new Bold()
                );
                Paragraph paraHeader = new Paragraph(runHeader);
                TableCell tcHeader = new TableCell(paraHeader);

                runHeader.Append(runPropsHeader);
                runHeader.Append(new Text(skill.Name ?? string.Empty));
                tcHeader.Append(new TableCellProperties(
                    new TableCellBorders(
                        new TopBorder { Val = BorderValues.None },
                        new BottomBorder { Val = BorderValues.None },
                        new LeftBorder { Val = BorderValues.None },
                        new RightBorder { Val = BorderValues.None }
                    )
                ));
                trHeader.Append(tcHeader);
                trHeader.Append(new TableCell(new Paragraph(new Run(new Text(string.Empty)))));
                table.Append(trHeader);

                for (int i = 0; i < skill.Keywords.Count; i += 2)
                {
                    bool extraBreakLine = (skill.Keywords.Count > 1 && i >= skill.Keywords.Count - 2) ? true : false;
                    TableRow tr = new TableRow();
                    var cell1 = CreateCell(skill.Keywords[i]?.Name, extraBreakLine);
                    tr.Append(cell1);

                    if (i + 1 < skill.Keywords.Count)
                    {
                        var cell2 = CreateCell(skill.Keywords[i + 1]?.Name, extraBreakLine);
                        tr.Append(cell2);
                    }

                    table.Append(tr);
                }

                body.Append(table);
            }
        }
    }

    private TableCell CreateCell(string? text, bool extraBreakline = false, string fontSize = "20")
    {
        var runProps = new RunProperties(
            new RunFonts() { Ascii = "Albert Sans" },
            new FontSize() { Val = fontSize }
        );

        var run = new Run(runProps);
        run.Append(new Text(text ?? string.Empty));

        if (extraBreakline)
        {
            run.Append(new Break());
        }

        var para = new Paragraph(run);

        var cellProps = new TableCellProperties(
            new TableCellBorders(
                new TopBorder { Val = BorderValues.None },
                new BottomBorder { Val = BorderValues.None },
                new LeftBorder { Val = BorderValues.None },
                new RightBorder { Val = BorderValues.None }
            )
        );

        var cell = new TableCell(para);
        cell.Append(cellProps);

        return cell;
    }

    private void AddProjects(WordprocessingDocument doc, List<Project>? projects)
    {
        if (projects is not null && projects.Any())
        {
            NewPage(doc);
            AddHeader(doc, "Projects");
        }
    }

    private void AddWork(WordprocessingDocument doc, List<Work>? works)
    {
        if (works is not null && works.Any())
        {
            NewPage(doc);
            AddHeader(doc, "Work");


        }
    }
    #endregion

    private Drawing CreateImage(MainDocumentPart mainPart, string relationshipId, string name, long width, long height)
    {
        return new Drawing(
            new WP.Inline(
                new WP.Extent() { Cx = width, Cy = height },
                new WP.EffectExtent()
                {
                    LeftEdge = 0L,
                    TopEdge = 0L,
                    RightEdge = 0L,
                    BottomEdge = 0L
                },
                new WP.DocProperties()
                {
                    Id = (UInt32Value)1U,
                    Name = name
                },
                new DW.Graphic(
                    new DW.GraphicData(
                        new DW.Pictures.Picture(
                            new DW.Pictures.NonVisualPictureProperties(
                                new DW.Pictures.NonVisualDrawingProperties()
                                {
                                    Id = (UInt32Value)0U,
                                    Name = name
                                },
                                new DW.Pictures.NonVisualPictureDrawingProperties()
                            ),
                            new DW.Pictures.BlipFill(
                                new DW.Blip()
                                {
                                    Embed = relationshipId,
                                    CompressionState = DW.BlipCompressionValues.Print
                                },
                                new DW.Stretch(
                                    new DW.FillRectangle()
                                )
                            ),
                            new DW.Pictures.ShapeProperties(
                                new DW.Transform2D(
                                    new DW.Offset() { X = 0L, Y = 0L },
                                    new DW.Extents() { Cx = width, Cy = height }
                                ),
                                new DW.PresetGeometry(
                                    new DW.AdjustValueList()
                                )
                                { Preset = DW.ShapeTypeValues.Rectangle }
                            )
                        )
                    )
                    { Uri = "http://schemas.openxmlformats.org/drawingml/2006/picture" }
                )
            )
            {
                DistanceFromTop = (UInt32Value)0U,
                DistanceFromBottom = (UInt32Value)0U,
                DistanceFromLeft = (UInt32Value)0U,
                DistanceFromRight = (UInt32Value)0U
            }
        );
    }
}
